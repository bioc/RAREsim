re_tab$calc <- re_tab$phi*(re_tab$N^re_tab$omega)
re_tab$tot <- re_tab$calc*18.402
re_tab
afp
re_tab$pop <- c('SAS', 'SAS', 'NFE', 'NFE', 'EAS',  'EAS', 'AFR', 'AFR', 'global', 'global')
both <- merge(re_tab, afp, by = c('block', 'pop'))
both1 <- both
for(i in 9:15){
both1[,i] <- both1[,i]*both1$tot
}
both1
write.table(both1, 'Fun_syn_expected_count_per_bin.txt',
sep = '\t', quote = FALSE, row.names = FALSE)
setwd('/Users/megansorenson/Documents/RAREsim/Chr19/Fun_syn')
fit <- read.table('Fun_syn_expected_count_per_bin.txt', header = TRUE)
mac_template <- as.data.frame(matrix(nrow=20, ncol = 10))
colnames(mac_template) <- c('block', 'pop', 'Singletons', 'Doubletons', 'MAC=3-5',
'MAC=6-10', 'MAC=11-20',
'MAC=21-MAF005',
'MAF005-MAF01', 'rep')
#### loop defines the bins
loop <- as.data.frame(matrix(nrow=7,  ncol = 2))
colnames(loop) <- c('Start', 'End')
loop$Start <- c(1,2,3,6,11,21,'.')
loop$End <- c(1,2,5,10,20,'.','.')
##### make a list of the functional  vs  synonymous variants
pop <- 'EAS'
temp <- read.table('Annotated_bp_Block80.txt',
header = TRUE)
temp$V2 <- as.character(temp$V2)
for(i in 1:nrow(temp)){
tmp <- strsplit(temp$V2[i], split  =  '-')
temp$pos[i] <- tmp[[1]][2]
}
### legend file
leg <- read.table('Block80_rep1.legend', header = TRUE)
leg$num <- 1:nrow(leg)
head(temp)
head(leg)
both <- merge(temp, leg, by  ='pos')
head(both)
setwd('/Users/megansorenson/Documents/RAREsim/Chr19/Simulations_gnomADsize/')
#### Need to update for the minor allele count!
mac2 <- c()
for(pop in c('EAS', 'SAS', 'AFR')){ #'NFE'
mac <- mac_template
N <- fit$N[which(fit$pop == pop  & fit$block  == 'fun')]
N005 <- floor(0.005*2*N)
loop$End[6] <- N005
loop$Start[7] <- N005 + 1
N01 <- floor(0.01*2*N)
loop$End[7] <- N01
loop$Start <- as.numeric(loop$Start)
loop$End <- as.numeric(loop$End)
for(bl in  80){
mac <- mac_template
mac$block <- bl
mac$pop <- pop
for(rep in c(1:100)){
temp <- read.table(paste0(pop,'_MAC/Block',bl,'/Rep', rep,'.count.txt'))
temp1 <- temp[both$num[which(both$fun_syn == 'fun')],]
for(k in 1:nrow(loop)){
tmp <-  temp1[which(temp1 >= loop$Start[k] & temp1 <= loop$End[k])]
n1 <- length(tmp)
mac[rep,k+2] <- n1
}
mac$rep[rep] <- rep
mac$func[rep] <- 'fun'
###syn
temp1 <- temp[both$num[which(both$fun_syn == 'syn')],]
for(k in 1:nrow(loop)){
tmp <-  temp1[which(temp1 >= loop$Start[k] & temp1 <= loop$End[k])]
n1 <- length(tmp)
mac[10+rep,k+2] <- n1
}
mac$rep[10+rep] <- rep
mac$func[10+rep] <- 'syn'
}
mac2 <- rbind(mac2, mac)
}
}
mac2$data <- 'HAPGEN2 over-simulated'
setwd('/Users/megansorenson/Documents/RAREsim/Chr19/Fun_syn/')
afp <- read.table('Block80_afs_fun_syn.txt', header = TRUE, sep = '\t')
af <- afp
for(i in 3:9){
af[,i] <- af[,i]*af$Total
}
af$func <- af$block
af$block <- 80
af$rep <-  '.'
af$data <- 'gnomAD'
af <- af[,-c(10)]
af <- af[,c(1:9,11,10,12)]
names(af) <- names(mac2)
mac3 <- c()
setwd('/Users/megansorenson/Documents/RAREsim/Chr19/Simulations_gnomADsize/')
for(pop in c('EAS', 'SAS', 'AFR')){ #NFE
mac <- mac_template
N <- fit$N[which(fit$pop == pop  & fit$block  == 'fun')]
N005 <- floor(0.005*2*N)
loop$End[6] <- N005
loop$Start[7] <- N005 + 1
N01 <- floor(0.01*2*N)
loop$End[7] <- N01
loop$Start <- as.numeric(loop$Start)
loop$End <- as.numeric(loop$End)
for(bl in  80){
mac <- mac_template[1:10,]
mac$block <- bl
mac$pop <- pop
for(rep in c(1:10)){
rem_all<-c()
temp <- read.table(paste0(pop,'_MAC/Block',bl,'/Rep', rep,'.count.txt'))
temp1 <- temp[both$num[which(both$fun_syn == 'fun')],]
temp1 <- as.data.frame(temp1)
temp1$num <-  1:nrow(temp1)
for(k in nrow(loop):1){
tmp <-  temp1[which(temp1$temp1 >= loop$Start[k] & temp1$temp1 <= loop$End[k]),]
##### if there are not any SNVs in the bin, tmp is all NA's...
n1 <- nrow(tmp)
expect <- fit[which(fit$pop == pop & fit$block == 'fun'),k+8]  ##expected
#print(expect)
if(n1>0){
p <- expect/n1
}else{
if(expect < 1){next}
if(expect >=1){
p <- expect
}
}
if(p <= 1){
rd <- runif(n1)
rem <- tmp[c(which(rd >= p)),]
#print(rem)
### now need to keep these ones...
rem_all <- rbind(rem_all, rem)
}
if(p>1){
if(k==7){
print(c('Error! Not  enough in biggest bin.', pop, bl, rep))
next}
n2 <- expect  - n1 ### n2 is how many more we need
p1 <- n2/nrow(rem_all)  ### this is the proportion from rem_all
rem_all$rd <- runif(nrow(rem_all))
to_change <- rem_all[which(rem_all$rd  <= p1),]
mac_range <-  c(loop$Start[k]:loop$End[k])
to_change$new_MAC <- sample(mac_range, nrow(to_change),
replace = TRUE)
### change them within the MAC file.
####  this needs to change for the haplotype file!!!
temp1$V1[which(temp1$num %in% to_change$num)]<- to_change$new_MAC
rem_all <- rem_all[which(rem_all$rd > p1),]
change_all<- rbind(change_all,  to_change)
}
}
temp1 <- temp1[-c(rem_all$num),]
for(k in 1:nrow(loop)){
tmp <-  temp1[which(temp1$temp1 >= loop$Start[k] & temp1$temp1 <= loop$End[k]),]
n1 <- nrow(tmp)
mac[rep,k+2] <- n1
}
mac$rep[rep] <- rep
mac$func[rep] <- 'fun'
}
mac3 <- rbind(mac3, mac)
}
}
for(pop in c('EAS', 'SAS', 'AFR')){ #NFE
mac <- mac_template
N <- fit$N[which(fit$pop == pop  & fit$block  == 'syn')]
N005 <- floor(0.005*2*N)
loop$End[6] <- N005
loop$Start[7] <- N005 + 1
N01 <- floor(0.01*2*N)
loop$End[7] <- N01
loop$Start <- as.numeric(loop$Start)
loop$End <- as.numeric(loop$End)
for(bl in  80){
mac <- mac_template[1:10,]
mac$block <- bl
mac$pop <- pop
for(rep in c(1:10)){
rem_all<-c()
temp <- read.table(paste0(pop,'_MAC/Block',bl,'/Rep', rep,'.count.txt'))
temp1 <- temp[both$num[which(both$fun_syn == 'syn')],]
temp1 <- as.data.frame(temp1)
temp1$num <-  1:nrow(temp1)
for(k in nrow(loop):1){
tmp <-  temp1[which(temp1$temp1 >= loop$Start[k] & temp1$temp1 <= loop$End[k]),]
##### if there are not any SNVs in the bin, tmp is all NA's...
n1 <- nrow(tmp)
expect <- fit[which(fit$pop == pop & fit$block == 'syn'),k+8]  ##expected
#print(expect)
if(n1>0){
p <- expect/n1
}else{
if(expect < 1){next}
if(expect >=1){
p <- expect
}
}
if(p <= 1){
rd <- runif(n1)
rem <- tmp[c(which(rd >= p)),]
#print(rem)
### now need to keep these ones...
rem_all <- rbind(rem_all, rem)
}
if(p>1){
if(k==7){
print(c('Error! Not  enough in biggest bin.', pop, bl, rep))
next}
n2 <- expect  - n1 ### n2 is how many more we need
p1 <- n2/nrow(rem_all)  ### this is the proportion from rem_all
rem_all$rd <- runif(nrow(rem_all))
to_change <- rem_all[which(rem_all$rd  <= p1),]
mac_range <-  c(loop$Start[k]:loop$End[k])
to_change$new_MAC <- sample(mac_range, nrow(to_change),
replace = TRUE)
### change them within the MAC file.
####  this needs to change for the haplotype file!!!
temp1$V1[which(temp1$num %in% to_change$num)]<- to_change$new_MAC
rem_all <- rem_all[which(rem_all$rd > p1),]
change_all<- rbind(change_all,  to_change)
}
}
temp1 <- temp1[-c(rem_all$num),]
for(k in 1:nrow(loop)){
tmp <-  temp1[which(temp1$temp1 >= loop$Start[k] & temp1$temp1 <= loop$End[k]),]
n1 <- nrow(tmp)
mac[rep,k+2] <- n1
}
mac$rep[rep] <- rep
mac$func[rep] <- 'syn'
}
mac3 <- rbind(mac3, mac)
}
}
mac3$data <- 'RAREsim separated'
setwd("/Users/megansorenson/Documents/RAREsim/Chr19/Updated_files")
fit_all <- read.table('Expected_counts4raresim.txt',
header = TRUE, sep = '\t')
setwd('/Users/megansorenson/Documents/RAREsim/Chr19/Fun_syn')
fit <- read.table('Fun_syn_expected_count_per_bin.txt', header = TRUE)
setwd('/Users/megansorenson/Documents/RAREsim/Chr19/Simulations_gnomADsize/')
mac4 <- c()
for(pop in c('EAS', 'SAS', 'AFR')){#, 'NFE'
N <- fit$N[which(fit$pop == pop & fit$block == 'fun')]
N005 <- floor(0.005*2*N)
loop$End[6] <- N005
loop$Start[7] <- N005 + 1
N01 <- floor(0.01*2*N)
loop$End[7] <- N01
loop$Start <- as.numeric(loop$Start)
loop$End <- as.numeric(loop$End)
for(bl in 80){
mac <- mac_template
mac$block <- bl
mac$pop <- pop
for(rep in c(1:10)){
rem_all<-c()
temp <- read.table(paste0(pop,'_MAC/Block',bl,'/Rep', rep,'.count.txt'))
temp <- as.data.frame(temp)
temp$num <-  1:nrow(temp)
for(k in 1:nrow(loop)){
tmp <-  temp[which(temp$V1 >= loop$Start[k] & temp$V1 <= loop$End[k]),]
##### if there are not any SNVs in the bin, tmp is all NA's...
n1 <- nrow(tmp)
expect <- fit_all[which(fit_all$pop == pop & fit_all$block == bl),k+2]  ##expected
#print(expect)
p <- expect/n1
rd <- runif(n1)
rem <- tmp[c(which(rd >= p)),]
#print(rem)
### now need to keep these ones...
rem_all <- rbind(rem_all, rem)
}
temp <- temp[-c(rem_all$num),]
##### now do this for fun and syn:
temp1 <- temp[which(temp$num %in% both$num[which(both$fun_syn == 'fun')]),]
#####  ok, now I need the allele count to add to the plot
for(k in 1:nrow(loop)){
tmp <-  temp1[which(temp1$V1 >= loop$Start[k] & temp1$V1 <= loop$End[k]),]
n1 <- nrow(tmp)
mac[rep,k+2] <- n1
}
mac$rep[rep] <- rep
mac$func[rep] <- 'fun'
temp1 <- temp[which(temp$num %in% both$num[which(both$fun_syn == 'syn')]),]
#####  ok, now I need the allele count to add to the plot
for(k in 1:nrow(loop)){
tmp <-  temp1[which(temp1$V1 >= loop$Start[k] & temp1$V1 <= loop$End[k]),]
n1 <- nrow(tmp)
mac[(rep+10),k+2] <- n1
}
mac$rep[rep+10] <- rep
mac$func[rep+10] <- 'syn'
}
mac4  <- rbind(mac4,mac)
}
}
mac4$data  <- 'RAREsim original'
names(mac3)
names(mac4)
mac <- rbind(mac2, mac3)
mac <- mac[-c(which(is.na(mac$block))),]
names(mac)
names(mac4)
mac <- rbind(mac, mac4)
head(mac)
mac$data1 <- paste0(mac$func, ':', mac$data)
#### these are for the boxplot:
library(reshape2)
melted_mac <- melt(mac, id = c('block', 'pop', 'data', 'rep', 'func', 'data1'))
head(melted_mac)
### these are for points:
head(af)
head(fit)
fit$func <- fit$block
fit$block <- 80
names(af)
names(fit)
fit1  <- fit[,c(1,2,9:15,17)]
af_m  <- melt(af,  id = c('block', 'pop', 'data', 'rep', 'func'))
head(af_m)
table(melted_mac$pop, melted_mac$data)
fit1$data<- 'expected'
fit1$rep <- '.'
fit1 <- fit1[,c(1:9,12,10,11)]
names(fit1)<-  names(af)
both <- rbind(fit1,af)
fit_m <- melt(both, id =   c('pop',   'func',  'block', 'data',  'rep'))
head(fit_m)
library(ggplot2)
pop <- 'AFR'
p1 <- ggplot(melted_mac[which(melted_mac$pop == pop ),],
aes(x=variable, y=value , col = data1)) +
geom_boxplot() +
geom_point(data=af_m[which(af_m$pop  == pop),],
aes(x=variable, y=value , col = func), shape  = 8)+
geom_point(data=fit_m[which(fit_m$pop  == pop),],
aes(x=variable, y=value , col = func), shape  = 17)+
labs(y = 'Number of Variants', x = 'MAC Bin')+
theme(axis.text.x = element_text(angle = 25)) +
ggtitle(pop)
p1
pop <- 'EAS'
p2 <- ggplot(melted_mac[which(melted_mac$pop == pop &
melted_mac$data == 'RAREsim'),],
aes(x=variable, y=value , col = func)) +
geom_boxplot() +
geom_point(data=af_m[which(af_m$pop  == pop),],
aes(x=variable, y=value , col = func), shape  = 8)+
geom_point(data=fit_m[which(fit_m$pop  == pop),],
aes(x=variable, y=value , col = func), shape  = 17)+
labs(y = 'Number of Variants', x = 'MAC Bin')+
theme(axis.text.x = element_text(angle = 25)) +
ggtitle(pop)
p2
melted_mac[which(melted_mac$pop  == 'EAS'),]
table(melted_mac$data)
af_m[which(af_m$pop  == 'EAS'),]
head(af_m)
head(af)
head(fit1)
bl <- read.table('cM_block_boundaries.txt', header = TRUE,
sep = '\t')
bl <- read.table('cM_block_boundaries.txt', header = TRUE,
sep = '\t')
setwd('/Users/megansorenson/Documents/RAREsim/Chr19/RecombinationMap/')
bl <- read.table('cM_block_boundaries.txt', header = TRUE,
sep = '\t')
setwd('/Users/megansorenson/Documents/RAREsim/Chr19/Updated_files/')
bl <- read.table('cM_block_boundaries.txt', header = TRUE,
sep = '\t')
head(bl)
bl[which(bl$Block == 37),]
setwd('/Users/megansorenson/Documents/RAREsim/Chr19/Updated_files/')
df <- read.table('Chr19_gencode_annotated_cds_canonical_transcripts_2use.txt',
header = TRUE)
head(df)
df[which(df$block == 37),]
gen37 <- df[which(df$block == 37),]
bp <- c()
tmp <- gen37$Start:gen37$End
i=1
tmp <- gen37$Start[i]:gen37$End[i]
bp <- c()
for(i in 1:nrow(gen37)){
tmp <- gen37$Start[i]:gen37$End[i]
bp <- c(tmp, bp)
}
all <- bl$Min[which(bl$Block == 37)]:bl$Max[which(bl$Block == 37)]
all <- all[-c(all %in% bp)]
all <- bl$Min[which(bl$Block == 37)]:bl$Max[which(bl$Block == 37)]
all <- all[-c(which(all %in% bp))]
length(all)
all1 <- all[1:20000,]
all1 <- all[1:20000]
summary(all1)
setwd('/Users/megansorenson/Documents/RAREsim/Chr19/Fun_syn/')
gnom <- read.table('EAS_Chr19_more_info.INFO', header = TRUE)
summary(gnom$POS %in% all1)
summary(gnom$POS %in% all)
###################
### AFS - fit the blocks data
### Update April 10, 2020
###################
#### step  6 - prepare the AFS data
#### still need to explore multiple starting values
setwd('/Users/megansorenson/Documents/RAREsim/Chr19/Updated_files/')
dff <- read.table('Number_bp_per_block.txt', header = TRUE)
setwd('/Users/megansorenson/Documents/RAREsim/Chr19/AFS/gnomAD/')
af <- c()
for(i in c('NFE', 'EAS', 'AFR', 'SAS')){
temp <- read.table(paste0(i,  '_Block_AFS_gnomAD.txt'),
header = TRUE, sep = '\t')
colnames(temp)[9:10] <- c("MAC.21.MAF0.005", 'MAF0.005.MAF0.01')
temp$pop <- i
af <- rbind(af, temp)
}
######### change the bins:
af1 <- af
head(af1)
colnames(af1)[4] <- 'MAC.3.5'
head(af1)
af1$MAC.3.5 <- af1$MAC.3.5 + af1$MAC.4.5
af1 <- af1[,-c(5)]
head(af1)
af1$MAC.11.15 <- af1$MAC.11.15 + af1$MAC.16.20
names(af1)
colnames(af1)[6] <- 'MAC.11.20'
names(af1)
af1 <- af1[,-c(7)]
names(af1)
# af1$MAC.21.MAF0.005 <- af1$MAC.21.MAF0.005 + af1$MAF0.005.MAF0.01
# names(af1)
# colnames(af1)[7] <- 'MAC.21.MAF01'
# names(af1)
# af1 <- af1[,-c(8)]
# names(af1)
#
af <- af1
table(af$pop)
head(af)
summary(af$Total)
both <- merge(af, dff, by.x = 'block',
by.y = 'Block', all.x = TRUE)
af <- both
af$N_bp  <- as.numeric(as.character(af$N_bp))
af[which(af$Total < 100),c(1,9,10)]
rem <- levels(droplevels(as.factor(af$block[which(af$Total < 100)])))
rem <- as.numeric(as.character(rem))
#### merge blocks 8, 17, 50, 57, and 92 with the blocks below
### also  remove block 17 for only having one gene
rem <-  c(rem, 17)
head(af)
#### just needs  to be done by ancestrty
#### merge columns 2-9
af_new <- c()
for(i in c('NFE', 'EAS', 'AFR', 'SAS')){
temp <-  af[which(af$pop == i),]
for(j in rem){
tmp <- temp[which(temp$block == j |
temp$block == j-1),]
tmp[1,c(2:9,11)] <- colSums(tmp[,c(2:9,11)], na.rm = TRUE)
temp <- temp[-c(which(temp$block == j)),]
temp[which(temp$block == j-1),] <- tmp[1,]
}
af_new <- rbind(af_new, temp)
}
write.table(af_new, 'AFS_data_blocks_merged.txt',
row.names = FALSE, sep  = '\t', quote  = FALSE)
af <- af_new
### count the empty bins
af$Zeros <- rowSums(af == 0)
table(af$Zeros)
dim(af)
summary(af$Total)
afp <- af
for(i in 2:8){
afp[,i] <- (afp[,i]/afp$Total)
}
head(afp)
afs_nfe <- afp[which(afp$pop == 'NFE' & afp$block == 37),2:8]
afs_afr <- afp[which(afp$pop == 'AFR' & afp$block == 37),2:8]
afs_eas <- afp[which(afp$pop == 'EAS' & afp$block == 37),2:8]
afs_sas <- afp[which(afp$pop == 'SAS' & afp$block == 37),2:8]
setwd("/Users/megansorenson/Documents/RAREsim_package/data/")
save(afs_nfe, file = 'afs_nfe.RData')
save(afs_afr, file = 'afs_afr.RData')
save(afs_eas, file = 'afs_eas.RData')
save(afs_sas, file = 'afs_sas.RData')
afs_nfe <- afp[which(afp$pop == 'NFE' & afp$block == 37),2:8]
afs_afr <- afp[which(afp$pop == 'AFR' & afp$block == 37),2:8]
afs_eas <- afp[which(afp$pop == 'EAS' & afp$block == 37),2:8]
afs_sas <- afp[which(afp$pop == 'SAS' & afp$block == 37),2:8]
setwd("/Users/megansorenson/Documents/RAREsim_package/data/")
save(afs_nfe, file = 'afs_nfe.RData')
save(afs_afr, file = 'afs_afr.RData')
save(afs_eas, file = 'afs_eas.RData')
save(afs_sas, file = 'afs_sas.RData')
afs_afr
document()
check()
build()
build()
install()
document()
check()
Fit_AFS(afs_afr, 8128, 0.97)
