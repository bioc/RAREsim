alpha=2
beta=1
if((is.null(pop)==TRUE)  & ((is.numeric(alpha) == FALSE) | (is.numeric(beta) == FALSE) |
(is.numeric(b) == FALSE))){
print('All parameters are required to be numeric')
} ###  This does not work!s
b <-0
if((is.null(pop)==TRUE)  & ((is.numeric(alpha) == FALSE) | (is.numeric(beta) == FALSE) |
(is.numeric(b) == FALSE))){
print('Error: at least one parameter is not numeric')
}
library(devtools)
setwd('/Users/megansorenson/Documents/RAREsim_package/')
build()
document()
setwd('/Users/megansorenson/Documents/RAREsim_package/')
build()
build()
build()
document()
document()
install()
setwd('/Users/megansorenson/Documents/RAREsim_package/')
build()
document()
document()
document()
build()
install()
build()
document()
document()
document()
build()
build()
install()
build()
build()
document()
build()
install()
document()
build()
build()
document()
build()
install()
### mac check
if(is.numeric(MAC_afr)==FALSE){
stop('Error: MACs must be numeric')
}
is.numeric(MAC_afr)
build()
build()
install()
document()
build()
install()
build()
install()
install()
document()
build()
install()
MAC = c(1,2,3,4,5,6,8,9)
tmp <- MAC[which(MAC == 7)]
nrow(tmp)
length(tmp)
MAC$num <- 1:length(MAC)
MAC = c(1,2,3,4,5,6,8,9)
MAC$num <-  1:nrow(MAC) # Identify the line each variant is on
MAC <- as.data.frame(MAC)
MAC$num <-  1:nrow(MAC) # Identify the line each variant is on
MAC
tmp <- MAC[which(MAC$MAC == 7),]
nrow(tmp)
document()
build()
install()
library(RAREsim)
data('afs_nfe')
mac <- afs_nfe[,c(1,2)]
af1 <- afs(mac = mac, pop = 'NFE')
af1
mac <- mac[,c(1,2)]
mac$Prop <- af1$Prop
head(mac)
### total number of variants:
tv1 <- nvariant(pop = 'NFE', n = 56685)
### total number of variants:
tv1 <- nvariant(pop = 'NFE', N = 56685)
tv1*19.029
bin_estimates1 <- Expected_variants(Total_num_var = tv1*19.029,
mac_bin_prop = mac)
bin_estimates1
setwd('/Users/megansorenson/Documents/RAREsim/Example/R_function/')
write.table(bin_estimates1, 'Expected_num_variants_NFE.txt', row.names = FALSE,
sep =  '\t', quote = FALSE)
nfe_mac <- read.table('/Users/megansorenson/Documents/RAREsim/Example/NFE/NFE_Block37_Rep11.count.txt')
### give the correct names to work with the function
MAC <- nfe_mac
expected <- bin_estimates1
ToPrune <- Pruning_info(MAC = MAC, expected = expected)
colnames(expected) == c('Lower', 'Upper', 'Expected_var'))
(colnames(expected) == c('Lower', 'Upper', 'Expected_var'))
(colnames(expected) = c('Lower', 'Upper', 'Expected_var'))
(colnames(expected) == c('Lower', 'Upper', 'Expected_var'))
((colnames(expected)[1] == 'Lower') & (colnames(expected)[2] == 'Upper')
& (colnames(expected)[3] == 'Expected_var')) == FALSE)
(((colnames(expected)[1] == 'Lower') & (colnames(expected)[2] == 'Upper')
& (colnames(expected)[3] == 'Expected_var')) == FALSE)
# check for correct column names
if(((colnames(expected)[1] == 'Lower') & (colnames(expected)[2] == 'Upper')
& (colnames(expected)[3] == 'Expected_var')) == FALSE){
stop('Error: Column names from expected should be "Lower", "Upper", and "Expected_var"')
}
bin_estimates1 <- Expected_variants(Total_num_var = tv1*19.029,
mac_bin_prop = mac)
bin_estimates1
expected <- bin_estimates1
# check for correct column names
if(((colnames(expected)[1] == 'Lower') & (colnames(expected)[2] == 'Upper')
& (colnames(expected)[3] == 'Expected_var')) == FALSE){
print('Error: Column names from expected should be "Lower", "Upper", and "Expected_var"')
}
(colnames(expected)[1] == 'Lower') & (colnames(expected)[2] == 'Upper')
& (colnames(expected)[3] == 'Expected_var'))
(colnames(expected)[1] == 'Lower') & (colnames(expected)[2] == 'Upper')
& (colnames(expected)[3] == 'Expected_var')
(colnames(expected)[1] == 'Lower') && (colnames(expected)[2] == 'Upper')
&& (colnames(expected)[3] == 'Expected_var')
(colnames(expected)[1] == 'Lower')
(colnames(expected)[2] == 'Upper')
(colnames(expected)[1] == 'Lower') & (colnames(expected)[2] == 'Upper')
(colnames(expected)[3] == 'Expected_var')
((colnames(expected)[1] == 'Lower') & (colnames(expected)[2] == 'Upper')
& (colnames(expected)[3] == 'Expected_var') )
( ((colnames(expected)[1] == 'Lower') & (colnames(expected)[2] == 'Upper')
& (colnames(expected)[3] == 'Expected_var') ) == FALSE)
ToPrune <- Pruning_info(MAC = MAC, expected = expected)
build()
install()
library(RAREsim)
ToPrune <- Pruning_info(MAC = MAC, expected = expected)
# MAC bins need to be non-overlapping and exhaustive
temp <- c()
for(i in 1:nrow(expected)){
tmp <- c(expected$Lower[i]: expected$Upper[i])
temp <- c(temp, tmp)
}
temp
check <- c(expected$Lower[1]:expected$Upper[nrow(expected)])
(temp == check)
if(identical(temp, check) == FALSE){
print('Warning: The MAC bins should be disjoint and exhaustive with respect to rare allele counts.
Check your MAC bins.')
}
identical(temp, check)
if(identical(temp, check) == FALSE){
print('Warning: The MAC bins should be disjoint and exhaustive with respect to rare allele counts.
Check your MAC bins.')
}
setwd('/Users/megansorenson/Documents/RAREsim_package/')
build()
install()
ToPrune <- Pruning_info(MAC = MAC, expected = expected)
summary(ToPrune$New_mac == 0)
expected
summary(MAC == 1)
k=7
rem_all<-c() # store variants that will have all alternate alleles removed
change_all <-  c()  # store variants that will have a subset of alternate alleles removed
# check that there are more simulated rare alleles than expected
if(length(which(MAC$V1>0))<sum(expected$Expected_var)){
print('Error, not enough rare alleles')
}
MAC$num <-  1:nrow(MAC) # Identify the line each variant is on
colnames(MAC)[1] <- 'V1' # consistent columnn names for the function
tmp <-  MAC[which(MAC$V1 >= expected$Lower[k] & MAC$V1 <= expected$Upper[k]),] # pull the variants with the MAC bin of interest
tmp
expected
tmp <- as.data.frame(tmp)
colnames(tmp)[1] <- 'V1'
n1 <- nrow(tmp) # number of simulated variants in the MAC bin
expect <- expected$Expected_var[k] # number of expected  variants in the MAC bin
if(n1>0){ # when there are simulated variants in the bin
p <- expect/n1 # calculate expected over simulated
}else{ # when there are not any simulated variants in the bin
if(expect < 3){next} # skip if we expect less than 3
if(expect >=3){ # if we expect more than 3 variants in the bin
p <- expect # p is just the number we expect
}
}
# When we have less expected variants than simulated in the MAC bin
if(p <= 1){
tmp$rd <- runif(n1) # take a random draw from the uniform(0,1) distribution for each variant
rem <- tmp[c(which(tmp$rd >= p)),] # remove the variants >= p (so keep variants with probability p)
rem_all <- rbind(rem_all, rem) # create a list of all variants to remove
}
# When we have more expected variants than simulated in the MAC bin
if(p>1){
if((expect-n1) >3){ # skip the bin if the number of simulated variants is within 3 of expected
next}
n2 <- expect  - n1 ### n2 is how many more we need
p1 <- n2/nrow(rem_all)  ### this is the proportion from rem_all to instead only remove a subset of variants
if(p1 > 1){ # if there are not enough pruned variants to add, give a warning and add all
print(paste0('Warning: The Bin with MAC ', expected$Lower[k], ':', expected$Upper[k],
' has less than the expected number of minor alleles'))
to_change <- rem_all # add all variants that were previously pruned
mac_range <-  c(expected$Lower[k]:expected$Upper[k]) # list the possible new MACs
to_change$new_MAC <- sample(mac_range, nrow(to_change),
replace = TRUE) # randomly select a new MAC
rem_all <- c() # all the pruned variants are now removing a subset of alternate alleles
change_all<- rbind(change_all, to_change) # bind the list of variants to the full list
next
}
rem_all$rd <- runif(nrow(rem_all)) # new random draw for all of the variants to prune
to_change <- rem_all[which(rem_all$rd  <= p1),] # select variants to remove a subset with probability p1
mac_range <-  c(expected$Lower[k]:expected$Upper[k]) # list the possible new MACs
to_change$new_MAC <- sample(mac_range, nrow(to_change),
replace = TRUE) # randomly select a new MAC
rem_all <- rem_all[which(rem_all$rd > p1),] # remove the variants that will have a subset of alternated alleles returned to reference from the list of completely pruned variants
change_all<- rbind(change_all, to_change) # create a complete list of all the variants to remove a subset of alternate alleles
}
k=6
tmp <-  MAC[which(MAC$V1 >= expected$Lower[k] & MAC$V1 <= expected$Upper[k]),] # pull the variants with the MAC bin of interest
tmp <- as.data.frame(tmp)
colnames(tmp)[1] <- 'V1'
n1 <- nrow(tmp) # number of simulated variants in the MAC bin
expect <- expected$Expected_var[k] # number of expected  variants in the MAC bin
expect
if(n1>0){ # when there are simulated variants in the bin
p <- expect/n1 # calculate expected over simulated
}else{ # when there are not any simulated variants in the bin
if(expect < 3){next} # skip if we expect less than 3
if(expect >=3){ # if we expect more than 3 variants in the bin
p <- expect # p is just the number we expect
}
}
# When we have less expected variants than simulated in the MAC bin
if(p <= 1){
tmp$rd <- runif(n1) # take a random draw from the uniform(0,1) distribution for each variant
rem <- tmp[c(which(tmp$rd >= p)),] # remove the variants >= p (so keep variants with probability p)
rem_all <- rbind(rem_all, rem) # create a list of all variants to remove
}
# When we have more expected variants than simulated in the MAC bin
if(p>1){
if((expect-n1) >3){ # skip the bin if the number of simulated variants is within 3 of expected
next}
n2 <- expect  - n1 ### n2 is how many more we need
p1 <- n2/nrow(rem_all)  ### this is the proportion from rem_all to instead only remove a subset of variants
if(p1 > 1){ # if there are not enough pruned variants to add, give a warning and add all
print(paste0('Warning: The Bin with MAC ', expected$Lower[k], ':', expected$Upper[k],
' has less than the expected number of minor alleles'))
to_change <- rem_all # add all variants that were previously pruned
mac_range <-  c(expected$Lower[k]:expected$Upper[k]) # list the possible new MACs
to_change$new_MAC <- sample(mac_range, nrow(to_change),
replace = TRUE) # randomly select a new MAC
rem_all <- c() # all the pruned variants are now removing a subset of alternate alleles
change_all<- rbind(change_all, to_change) # bind the list of variants to the full list
next
}
rem_all$rd <- runif(nrow(rem_all)) # new random draw for all of the variants to prune
to_change <- rem_all[which(rem_all$rd  <= p1),] # select variants to remove a subset with probability p1
mac_range <-  c(expected$Lower[k]:expected$Upper[k]) # list the possible new MACs
to_change$new_MAC <- sample(mac_range, nrow(to_change),
replace = TRUE) # randomly select a new MAC
rem_all <- rem_all[which(rem_all$rd > p1),] # remove the variants that will have a subset of alternated alleles returned to reference from the list of completely pruned variants
change_all<- rbind(change_all, to_change) # create a complete list of all the variants to remove a subset of alternate alleles
}
tmp <-  MAC[which(MAC$V1 >= expected$Lower[k] & MAC$V1 <= expected$Upper[k]),] # pull the variants with the MAC bin of interest
k=5
tmp <-  MAC[which(MAC$V1 >= expected$Lower[k] & MAC$V1 <= expected$Upper[k]),] # pull the variants with the MAC bin of interest
tmp <- as.data.frame(tmp)
colnames(tmp)[1] <- 'V1'
n1 <- nrow(tmp) # number of simulated variants in the MAC bin
expect <- expected$Expected_var[k] # number of expected  variants in the MAC bin
if(n1>0){ # when there are simulated variants in the bin
p <- expect/n1 # calculate expected over simulated
}else{ # when there are not any simulated variants in the bin
if(expect < 3){next} # skip if we expect less than 3
if(expect >=3){ # if we expect more than 3 variants in the bin
p <- expect # p is just the number we expect
}
}
# When we have less expected variants than simulated in the MAC bin
if(p <= 1){
tmp$rd <- runif(n1) # take a random draw from the uniform(0,1) distribution for each variant
rem <- tmp[c(which(tmp$rd >= p)),] # remove the variants >= p (so keep variants with probability p)
rem_all <- rbind(rem_all, rem) # create a list of all variants to remove
}
# When we have more expected variants than simulated in the MAC bin
if(p>1){
if((expect-n1) >3){ # skip the bin if the number of simulated variants is within 3 of expected
next}
n2 <- expect  - n1 ### n2 is how many more we need
p1 <- n2/nrow(rem_all)  ### this is the proportion from rem_all to instead only remove a subset of variants
if(p1 > 1){ # if there are not enough pruned variants to add, give a warning and add all
print(paste0('Warning: The Bin with MAC ', expected$Lower[k], ':', expected$Upper[k],
' has less than the expected number of minor alleles'))
to_change <- rem_all # add all variants that were previously pruned
mac_range <-  c(expected$Lower[k]:expected$Upper[k]) # list the possible new MACs
to_change$new_MAC <- sample(mac_range, nrow(to_change),
replace = TRUE) # randomly select a new MAC
rem_all <- c() # all the pruned variants are now removing a subset of alternate alleles
change_all<- rbind(change_all, to_change) # bind the list of variants to the full list
next
}
rem_all$rd <- runif(nrow(rem_all)) # new random draw for all of the variants to prune
to_change <- rem_all[which(rem_all$rd  <= p1),] # select variants to remove a subset with probability p1
mac_range <-  c(expected$Lower[k]:expected$Upper[k]) # list the possible new MACs
to_change$new_MAC <- sample(mac_range, nrow(to_change),
replace = TRUE) # randomly select a new MAC
rem_all <- rem_all[which(rem_all$rd > p1),] # remove the variants that will have a subset of alternated alleles returned to reference from the list of completely pruned variants
change_all<- rbind(change_all, to_change) # create a complete list of all the variants to remove a subset of alternate alleles
}
k=4
tmp <-  MAC[which(MAC$V1 >= expected$Lower[k] & MAC$V1 <= expected$Upper[k]),] # pull the variants with the MAC bin of interest
tmp <- as.data.frame(tmp)
colnames(tmp)[1] <- 'V1'
n1 <- nrow(tmp) # number of simulated variants in the MAC bin
expect <- expected$Expected_var[k] # number of expected  variants in the MAC bin
if(n1>0){ # when there are simulated variants in the bin
p <- expect/n1 # calculate expected over simulated
}else{ # when there are not any simulated variants in the bin
if(expect < 3){next} # skip if we expect less than 3
if(expect >=3){ # if we expect more than 3 variants in the bin
p <- expect # p is just the number we expect
}
}
# When we have less expected variants than simulated in the MAC bin
if(p <= 1){
tmp$rd <- runif(n1) # take a random draw from the uniform(0,1) distribution for each variant
rem <- tmp[c(which(tmp$rd >= p)),] # remove the variants >= p (so keep variants with probability p)
rem_all <- rbind(rem_all, rem) # create a list of all variants to remove
}
# When we have more expected variants than simulated in the MAC bin
if(p>1){
if((expect-n1) >3){ # skip the bin if the number of simulated variants is within 3 of expected
next}
n2 <- expect  - n1 ### n2 is how many more we need
p1 <- n2/nrow(rem_all)  ### this is the proportion from rem_all to instead only remove a subset of variants
if(p1 > 1){ # if there are not enough pruned variants to add, give a warning and add all
print(paste0('Warning: The Bin with MAC ', expected$Lower[k], ':', expected$Upper[k],
' has less than the expected number of minor alleles'))
to_change <- rem_all # add all variants that were previously pruned
mac_range <-  c(expected$Lower[k]:expected$Upper[k]) # list the possible new MACs
to_change$new_MAC <- sample(mac_range, nrow(to_change),
replace = TRUE) # randomly select a new MAC
rem_all <- c() # all the pruned variants are now removing a subset of alternate alleles
change_all<- rbind(change_all, to_change) # bind the list of variants to the full list
next
}
rem_all$rd <- runif(nrow(rem_all)) # new random draw for all of the variants to prune
to_change <- rem_all[which(rem_all$rd  <= p1),] # select variants to remove a subset with probability p1
mac_range <-  c(expected$Lower[k]:expected$Upper[k]) # list the possible new MACs
to_change$new_MAC <- sample(mac_range, nrow(to_change),
replace = TRUE) # randomly select a new MAC
rem_all <- rem_all[which(rem_all$rd > p1),] # remove the variants that will have a subset of alternated alleles returned to reference from the list of completely pruned variants
change_all<- rbind(change_all, to_change) # create a complete list of all the variants to remove a subset of alternate alleles
}
k=3
tmp <-  MAC[which(MAC$V1 >= expected$Lower[k] & MAC$V1 <= expected$Upper[k]),] # pull the variants with the MAC bin of interest
tmp <- as.data.frame(tmp)
colnames(tmp)[1] <- 'V1'
n1 <- nrow(tmp) # number of simulated variants in the MAC bin
expect <- expected$Expected_var[k] # number of expected  variants in the MAC bin
if(n1>0){ # when there are simulated variants in the bin
p <- expect/n1 # calculate expected over simulated
}else{ # when there are not any simulated variants in the bin
if(expect < 3){next} # skip if we expect less than 3
if(expect >=3){ # if we expect more than 3 variants in the bin
p <- expect # p is just the number we expect
}
}
# When we have less expected variants than simulated in the MAC bin
if(p <= 1){
tmp$rd <- runif(n1) # take a random draw from the uniform(0,1) distribution for each variant
rem <- tmp[c(which(tmp$rd >= p)),] # remove the variants >= p (so keep variants with probability p)
rem_all <- rbind(rem_all, rem) # create a list of all variants to remove
}
# When we have more expected variants than simulated in the MAC bin
if(p>1){
if((expect-n1) >3){ # skip the bin if the number of simulated variants is within 3 of expected
next}
n2 <- expect  - n1 ### n2 is how many more we need
p1 <- n2/nrow(rem_all)  ### this is the proportion from rem_all to instead only remove a subset of variants
if(p1 > 1){ # if there are not enough pruned variants to add, give a warning and add all
print(paste0('Warning: The Bin with MAC ', expected$Lower[k], ':', expected$Upper[k],
' has less than the expected number of minor alleles'))
to_change <- rem_all # add all variants that were previously pruned
mac_range <-  c(expected$Lower[k]:expected$Upper[k]) # list the possible new MACs
to_change$new_MAC <- sample(mac_range, nrow(to_change),
replace = TRUE) # randomly select a new MAC
rem_all <- c() # all the pruned variants are now removing a subset of alternate alleles
change_all<- rbind(change_all, to_change) # bind the list of variants to the full list
next
}
rem_all$rd <- runif(nrow(rem_all)) # new random draw for all of the variants to prune
to_change <- rem_all[which(rem_all$rd  <= p1),] # select variants to remove a subset with probability p1
mac_range <-  c(expected$Lower[k]:expected$Upper[k]) # list the possible new MACs
to_change$new_MAC <- sample(mac_range, nrow(to_change),
replace = TRUE) # randomly select a new MAC
rem_all <- rem_all[which(rem_all$rd > p1),] # remove the variants that will have a subset of alternated alleles returned to reference from the list of completely pruned variants
change_all<- rbind(change_all, to_change) # create a complete list of all the variants to remove a subset of alternate alleles
}
k=2
tmp <-  MAC[which(MAC$V1 >= expected$Lower[k] & MAC$V1 <= expected$Upper[k]),] # pull the variants with the MAC bin of interest
tmp <- as.data.frame(tmp)
colnames(tmp)[1] <- 'V1'
n1 <- nrow(tmp) # number of simulated variants in the MAC bin
expect <- expected$Expected_var[k] # number of expected  variants in the MAC bin
if(n1>0){ # when there are simulated variants in the bin
p <- expect/n1 # calculate expected over simulated
}else{ # when there are not any simulated variants in the bin
if(expect < 3){next} # skip if we expect less than 3
if(expect >=3){ # if we expect more than 3 variants in the bin
p <- expect # p is just the number we expect
}
}
# When we have less expected variants than simulated in the MAC bin
if(p <= 1){
tmp$rd <- runif(n1) # take a random draw from the uniform(0,1) distribution for each variant
rem <- tmp[c(which(tmp$rd >= p)),] # remove the variants >= p (so keep variants with probability p)
rem_all <- rbind(rem_all, rem) # create a list of all variants to remove
}
# When we have more expected variants than simulated in the MAC bin
if(p>1){
if((expect-n1) >3){ # skip the bin if the number of simulated variants is within 3 of expected
next}
n2 <- expect  - n1 ### n2 is how many more we need
p1 <- n2/nrow(rem_all)  ### this is the proportion from rem_all to instead only remove a subset of variants
if(p1 > 1){ # if there are not enough pruned variants to add, give a warning and add all
print(paste0('Warning: The Bin with MAC ', expected$Lower[k], ':', expected$Upper[k],
' has less than the expected number of minor alleles'))
to_change <- rem_all # add all variants that were previously pruned
mac_range <-  c(expected$Lower[k]:expected$Upper[k]) # list the possible new MACs
to_change$new_MAC <- sample(mac_range, nrow(to_change),
replace = TRUE) # randomly select a new MAC
rem_all <- c() # all the pruned variants are now removing a subset of alternate alleles
change_all<- rbind(change_all, to_change) # bind the list of variants to the full list
next
}
rem_all$rd <- runif(nrow(rem_all)) # new random draw for all of the variants to prune
to_change <- rem_all[which(rem_all$rd  <= p1),] # select variants to remove a subset with probability p1
mac_range <-  c(expected$Lower[k]:expected$Upper[k]) # list the possible new MACs
to_change$new_MAC <- sample(mac_range, nrow(to_change),
replace = TRUE) # randomly select a new MAC
rem_all <- rem_all[which(rem_all$rd > p1),] # remove the variants that will have a subset of alternated alleles returned to reference from the list of completely pruned variants
change_all<- rbind(change_all, to_change) # create a complete list of all the variants to remove a subset of alternate alleles
}
k=1
tmp <-  MAC[which(MAC$V1 >= expected$Lower[k] & MAC$V1 <= expected$Upper[k]),] # pull the variants with the MAC bin of interest
tmp <- as.data.frame(tmp)
colnames(tmp)[1] <- 'V1'
n1 <- nrow(tmp) # number of simulated variants in the MAC bin
expect <- expected$Expected_var[k] # number of expected  variants in the MAC bin
if(n1>0){ # when there are simulated variants in the bin
p <- expect/n1 # calculate expected over simulated
}else{ # when there are not any simulated variants in the bin
if(expect < 3){next} # skip if we expect less than 3
if(expect >=3){ # if we expect more than 3 variants in the bin
p <- expect # p is just the number we expect
}
}
# When we have less expected variants than simulated in the MAC bin
if(p <= 1){
tmp$rd <- runif(n1) # take a random draw from the uniform(0,1) distribution for each variant
rem <- tmp[c(which(tmp$rd >= p)),] # remove the variants >= p (so keep variants with probability p)
rem_all <- rbind(rem_all, rem) # create a list of all variants to remove
}
p
(expect-n1)
(expect-n1) >3)
((expect-n1) >3)
n2 <- expect  - n1 ### n2 is how many more we need
p1 <- n2/nrow(rem_all)  ### this is the proportion from rem_all to instead only remove a subset of variants
if(p1 > 1){ # if there are not enough pruned variants to add, give a warning and add all
print(paste0('Warning: The Bin with MAC ', expected$Lower[k], ':', expected$Upper[k],
' has less than the expected number of minor alleles'))
to_change <- rem_all # add all variants that were previously pruned
mac_range <-  c(expected$Lower[k]:expected$Upper[k]) # list the possible new MACs
to_change$new_MAC <- sample(mac_range, nrow(to_change),
replace = TRUE) # randomly select a new MAC
rem_all <- c() # all the pruned variants are now removing a subset of alternate alleles
change_all<- rbind(change_all, to_change) # bind the list of variants to the full list
next
}
rem_all$rd <- runif(nrow(rem_all)) # new random draw for all of the variants to prune
to_change <- rem_all[which(rem_all$rd  <= p1),] # select variants to remove a subset with probability p1
mac_range <-  c(expected$Lower[k]:expected$Upper[k]) # list the possible new MACs
to_change$new_MAC <- sample(mac_range, nrow(to_change),
replace = TRUE) # randomly select a new MAC
rem_all <- rem_all[which(rem_all$rd > p1),] # remove the variants that will have a subset of alternated alleles returned to reference from the list of completely pruned variants
setwd('/Users/megansorenson/Documents/RAREsim_package/')
build()
install()
ToPrune <- Pruning_info(MAC = MAC, expected = expected)
summary(ToPrune$New_mac)
table(ToPrune$New_mac)
MAC[which(MAC$V1 == 0)]
summary(MAC[which(MAC$V1 == 0)])
summary(MAC$V1 == 0)
expected
summary(MAC$V1 == 1)
expect
expected
table(ToPrune$New_mac)
455 +948
setwd('/Users/megansorenson/Documents/RAREsim_package/')
build()
build()
